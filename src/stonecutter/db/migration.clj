(ns stonecutter.db.migration
  (:require [monger.ragtime]                                ;; monger.ragtime required for ragtime migrations to work
            [monger.collection :as coll]
            [ragtime.core :as ragtime]
            [clojure.tools.logging :as log]
            [stonecutter.util.uuid :as uuid]
            [stonecutter.config :as config]
            [stonecutter.db.mongo :as db]))

(defn update-records [db coll f]
  (let [records (coll/find-maps db coll)]
    (doseq [record records]
      (coll/update-by-id db coll (:_id record) (f record)))))

(defn replace-records [db coll f]
  (let [records (coll/find-maps db coll)]
    (doseq [record records]
      (coll/remove-by-id db coll (:_id record))
      (coll/insert-and-return db coll (f record))))
  )

(defn add-user-id [record]
  (if (:uid record)
    record
    (assoc record :uid (uuid/uuid))))

(defn add-user-uids [db]
  (log/info "Running migration add-user-id")
  (update-records db "users" add-user-id)
  (log/info "Finished running migration add-user-id"))

(defn add-user-role [record]
  (if (:role record)
    record
    (assoc record :role (:default config/roles))))

(defn add-prof-pic [record]
  (if (:profile-picture record)
    record
    (assoc record :profile-picture config/default-profile-picture)))

(defn remove-prof-pic [record]
  (if (:profile-picture record)
    (dissoc record :profile-picture)
    record))

(defn change-default-to-untrusted [record]
  (if (or (= (:role record) "default") (= (:role record) nil))
    (assoc record :role (:untrusted config/roles))
    record))

(defn change-default-roles-to-untrusted-roles [db]
  (log/info "Running migration to change :default roles to :untrusted")
  (update-records db "users" change-default-to-untrusted)
  (log/info "Finished running migration user-role-are-untrusted"))

(defn add-user-roles [db]
  (log/info "Running migration add-user-roles")
  (update-records db "users" add-user-role)
  (log/info "Finished migration add-user-roles"))

(defn update-record-to-use-generated-id [key-param record]
  (if (= (key-param record) (:_id record))
    (dissoc record :_id)
    record))

(defn update-records-to-use-generated-ids [db]
  (log/info "Running migration to change _ids to be autogenerated by mongo")
  (doseq [[collection key-param] [[db/user-collection db/user-primary-key]
                                  [db/token-collection db/token-primary-key]
                                  [db/confirmation-collection db/confirmation-primary-key]
                                  [db/client-collection db/client-primary-key]
                                  [db/invitation-collection db/invite-primary-key]
                                  [db/forgotten-password-collection db/forgotten-password-primary-key]
                                  [db/auth-code-collection db/auth-code-primary-key]]]
    (replace-records db collection (partial update-record-to-use-generated-id key-param)))
  (log/info "finished migration to change _ids to be autogenerated by mongo"))

(defn add-default-user-profile-picture-src [db]
  (log/info "Running migration to add default profile pictures")
  (update-records db "users" add-prof-pic))

(defn remove-default-user-profile-picture-src [db]
  (log/info "Reversing migration to add default profile pictures")
  (update-records db "users" remove-prof-pic))

;; IMPORTANT DO *NOT* MODIFY THE EXISTING MIGRATION IDS IN THIS LIST
(def migrations
  [{:id "add-user-uid" :up add-user-uids}
   {:id "add-user-role" :up add-user-roles}
   {:id "replace-default-role-with-untrusted-role" :up change-default-roles-to-untrusted-roles}
   {:id "update-records-to-use-generated-ids" :up update-records-to-use-generated-ids}
   {:id "add-default-user-profile-picture-src" :up add-default-user-profile-picture-src :down remove-default-user-profile-picture-src}])

(defn run-migrations
  ([db]
   (run-migrations db migrations)
   (ragtime/rollback db (nth migrations 4)))
  ([db migrations]
   (let [index (ragtime/into-index migrations)]
     (ragtime/migrate-all db index migrations))))
